<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.2</version>
        <relativePath/>
    </parent>


    <groupId>com.easyms</groupId>
    <artifactId>easyms-sdk</artifactId>
    <version>1.0.26-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>easyms-starter-sdk</name>

    <prerequisites>
        <maven>${maven.version}</maven>
    </prerequisites>
    <modules>

        <module>easyms-rest-starter</module>
        <module>easyms-secured-rest-starter</module>
        <module>easyms-basic-starter</module>
        <module>easyms-test</module>
        <module>easyms-azure-test</module>
        <module>easyms-azure</module>
        <module>easyms-samples</module>
        <module>easyms-logging-starter</module>
        <module>main-class-extrator-plugin</module>
        <module>easyms-messaging</module>

    </modules>

    <organization>
        <name>easyms</name>
        <url>http://www.easyms.com</url>
    </organization>
    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>
    <scm>
        <connection>scm:git:git://github.com/easyms/easyms-sdk.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/easyms/easyms-sdk.git</developerConnection>
        <url>https://github.com/easyms/easyms-sdk</url>
    </scm>
    <developers>
        <developer>
            <name>Anis Bessa</name>
            <email>anis.bessa@nearteam.fr</email>
            <organization>Nearteam</organization>
        </developer>
    </developers>


    <properties>
        <java.version>11</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <maven.version>3.5.0</maven.version>
        <jacoco.version>0.8.4</jacoco.version>
        <skip.unit.tests>false</skip.unit.tests>
        <skip.integration.tests>false</skip.integration.tests>
        <guava.version>28.0-jre</guava.version>
        <javax.inject.version>1</javax.inject.version>
        <commons-collections4.version>4.3</commons-collections4.version>
        <app.id>${project.artifactId}</app.id>
        <swagger.project.contact>${project.description}</swagger.project.contact>
        <spring-cloud-dependencies.version>2021.0.1</spring-cloud-dependencies.version>
        <spring.boot-admin.version>3.1.2</spring.boot-admin.version>
        <swagger.version>3.0.0</swagger.version>
        <logstash-logback-encoder.version>6.0</logstash-logback-encoder.version>
        <rakugakibox.logback.version>2.7.1</rakugakibox.logback.version>
        <spring.config.name>${project.artifactId}</spring.config.name>
        <spring.profiles.active>dev</spring.profiles.active>
        <app.id>${project.artifactId}</app.id>
        <inherited.resources.dir>${project.build.directory}/inherited-resources</inherited.resources.dir>
        <source.docker.registry.url>registry-1.docker.io</source.docker.registry.url>
        <source.docker.openjdk.image.name>openjdk</source.docker.openjdk.image.name>
        <source.docker.openjdk.image.version>11.0.6-jdk-slim-buster</source.docker.openjdk.image.version>
        <target.docker.registry.url>index.docker.io</target.docker.registry.url>
        <docker-maven-spotify-plugin.version>1.2.0</docker-maven-spotify-plugin.version>
        <docker.dockerfile.directory>
            ${distrib.dir}/${project.artifactId}-${project.version}/${project.artifactId}-${project.version}/docker
        </docker.dockerfile.directory>
        <docker.image.name>${target.docker.registry.url}/${app.id}</docker.image.name>
        <docker.image.postfix></docker.image.postfix>
        <docker.image.version>${project.version}-${current.time}-${git.commit.id.abbrev}${docker.image.postfix}</docker.image.version>
        <distrib.dir>${project.build.directory}/distrib</distrib.dir>
        <spring-security-oauth2.version>2.3.6.RELEASE</spring-security-oauth2.version>
        <jacoco.ut.exec.datafile>${project.build.directory}/coverage-reports/jacoco-ut.exec</jacoco.ut.exec.datafile>
        <jacoco.it.exec.datafile>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco.it.exec.datafile>
        <jacoco.easyms.instr.coverage>0.70</jacoco.easyms.instr.coverage>
        <jacoco.easyms.branch.coverage>0.70</jacoco.easyms.branch.coverage>
        <jacoco.easyms.class.missed>0</jacoco.easyms.class.missed>
        <jacoco.additional.exclude1>SET_ME</jacoco.additional.exclude1>
        <jacoco.additional.exclude2>SET_ME</jacoco.additional.exclude2>
        <jacoco.additional.exclude3>SET_ME</jacoco.additional.exclude3>
        <jacoco.additional.exclude4>SET_ME</jacoco.additional.exclude4>
        <jacoco.additional.exclude5>SET_ME</jacoco.additional.exclude5>
        <source.application.config.dir>src/main/resources</source.application.config.dir>
        <assembly.commons.dir>${project.build.directory}/commons</assembly.commons.dir>
        <bin.dir>${basedir}/target/classes/bin</bin.dir>
        <certsPath>/etc/certificates</certsPath>
    </properties>

    <build>
        <resources>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.json</include>
                    <include>**/*.txt</include>
                    <include>**/*.xml</include>
                    <include>**/*.xls</include>
                    <include>**/*.html</include>
                    <include>**/*.sql</include>
                    <include>**/*.sh</include>
                    <include>**/*.args</include>
                    <include>**/*.factories</include>
                    <include>**/*dockerfile</include>
                    <include>**/*.wsdl</include>
                    <include>**/*.pem</include>
                </includes>
                <excludes>
                    <exclude>**/*.jks</exclude>
                    <exclude>**/*.pub</exclude>
                    <exclude>**/*assembly.xml</exclude>
                    <exclude>**/*access.xml</exclude>
                    <exclude>**/*.zip</exclude>
                    <exclude>**/*.gz</exclude>
                    <exclude>**/*.docx</exclude>
                </excludes>
            </resource>
            <resource>
                <filtering>false</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.jks</include>
                    <include>**/*.pub</include>
                    <include>**/*assembly.xml</include>
                    <include>**/*access.xml</include>
                    <include>**/*.zip</include>
                    <include>**/*.gz</include>
                    <include>**/*.docx</include>
                </includes>
            </resource>
            <resource>
                <directory>${project.build.directory}/generated-resources</directory>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <filtering>true</filtering>
                <directory>src/test/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.json</include>
                    <include>**/*.html</include>
                    <include>**/*.txt</include>
                    <include>**/*.xml</include>
                    <include>**/*.yml</include>
                    <include>**/*.wsdl</include>
                </includes>
                <excludes>
                    <exclude>**/*.jks</exclude>
                    <exclude>**/*.pub</exclude>
                    <exclude>**/*.docx</exclude>
                </excludes>
            </testResource>
            <testResource>
                <filtering>false</filtering>
                <directory>src/test/resources</directory>
                <includes>
                    <include>**/*.jks</include>
                    <include>**/*.pub</include>
                    <include>**/*.docx</include>
                </includes>
            </testResource>
        </testResources>
        <pluginManagement>
            <plugins>
                <!-- Versions plugin : manage versions at build-->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.7</version>
                    <configuration>
                        <generateBackupPoms>false</generateBackupPoms>
                    </configuration>
                </plugin>
                <!-- Compiler plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                    <configuration>
                        <release>11</release>
                        <fork>true</fork>
                        <compilerVersion>${java.version}</compilerVersion>
                        <showDeprecation>true</showDeprecation>
                        <showWarnings>true</showWarnings>
                        <optimize>true</optimize>
                    </configuration>
                </plugin>
                <!-- Surefire plugin : Unit test execution -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                        <!-- Sets the VM argument line used when unit tests are run. -->
                        <argLine>${surefireArgLine}</argLine>
                        <!-- Skips unit tests if the value of skip.unit.tests property is true -->
                        <skipTests>${skip.unit.tests}</skipTests>
                        <!-- Excludes integration tests when unit tests are run. -->
                        <excludes>
                            <exclude>**/IT*.java</exclude>
                        </excludes>
                    </configuration>
                </plugin>
                <!-- Failsafe plugin : Integration test execution-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <executions>
                        <!--
                            Ensures that both integration-test and verify goals of the Failsafe Maven
                            plugin are executed.
                        -->
                        <execution>
                            <id>integration-tests</id>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                            <configuration>
                                <!-- Sets the VM argument line used when integration tests are run. -->
                                <argLine>${failsafeArgLine}</argLine>
                                <!--
                                    Skips integration tests if the value of skip.integration.tests property
                                    is true
                                -->
                                <skipTests>${skip.integration.tests}</skipTests>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- Jacoco plugin : Code coverage analysis and checks -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.version}</version>
                    <executions>
                        <!--
                            Prepares the property pointing to the JaCoCo runtime agent which
                            is passed as VM argument when Maven the Surefire plugin is executed.
                        -->
                        <execution>
                            <id>pre-unit-test</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                            <configuration>
                                <!-- Sets the path to the file which contains the execution data. -->
                                <destFile>${jacoco.ut.exec.datafile}</destFile>
                                <!--
                                    Sets the name of the property containing the settings
                                    for JaCoCo runtime agent.
                                -->
                                <propertyName>surefireArgLine</propertyName>
                            </configuration>
                        </execution>
                        <!--
                            Ensures that the code coverage report for unit tests is created after
                            unit tests have been run.
                        -->
                        <execution>
                            <id>post-unit-test</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <configuration>
                                <!-- Sets the path to the file which contains the execution data. -->
                                <dataFile>${jacoco.ut.exec.datafile}</dataFile>
                                <!-- Sets the output directory for the code coverage report. -->
                                <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>

                                <excludes>
                                    <exclude>JAVAC.SYNTHCLASS</exclude>
                                    <exclude>JAVAC.SYNTHMETH</exclude>
                                    <exclude>**/*Config*.*</exclude>
                                    <exclude>**/*Configuration.*</exclude>
                                    <exclude>**/*Application.*</exclude>
                                    <exclude>**/*Constant*.*</exclude>
                                    <exclude>**/dto/**/*</exclude>
                                    <exclude>**/model/**/*</exclude>
                                    <exclude>${jacoco.additional.exclude1}</exclude>
                                    <exclude>${jacoco.additional.exclude2}</exclude>
                                    <exclude>${jacoco.additional.exclude3}</exclude>
                                    <exclude>${jacoco.additional.exclude4}</exclude>
                                    <exclude>${jacoco.additional.exclude5}</exclude>
                                </excludes>

                            </configuration>
                        </execution>
                        <!-- The Executions required by unit tests are omitted. -->
                        <!--
                            Prepares the property pointing to the JaCoCo runtime agent which
                            is passed as VM argument when Maven the Failsafe plugin is executed.
                        -->
                        <execution>
                            <id>pre-integration-test</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                            <configuration>
                                <!-- Sets the path to the file which contains the execution data. -->
                                <destFile>${jacoco.it.exec.datafile}</destFile>
                                <!--
                                    Sets the name of the property containing the settings
                                    for JaCoCo runtime agent.
                                -->
                                <propertyName>failsafeArgLine</propertyName>
                            </configuration>
                        </execution>
                        <!--
                            Ensures that the code coverage report for integration tests after
                            integration tests have been run.
                        -->
                        <execution>
                            <id>post-integration-test</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <configuration>
                                <!-- Sets the path to the file which contains the execution data. -->
                                <dataFile>${jacoco.it.exec.datafile}</dataFile>
                                <!-- Sets the output directory for the code coverage report. -->
                                <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                                <excludes>
                                    <exclude>JAVAC.SYNTHCLASS</exclude>
                                    <exclude>JAVAC.SYNTHMETH</exclude>
                                    <exclude>**/*Config*.*</exclude>
                                    <exclude>**/*Configuration.*</exclude>
                                    <exclude>**/*Application.*</exclude>
                                    <exclude>**/*Constant*.*</exclude>
                                    <exclude>**/dto/**/*</exclude>
                                    <exclude>**/model/**/*</exclude>
                                    <exclude>${jacoco.additional.exclude1}</exclude>
                                    <exclude>${jacoco.additional.exclude2}</exclude>
                                    <exclude>${jacoco.additional.exclude3}</exclude>
                                    <exclude>${jacoco.additional.exclude4}</exclude>
                                    <exclude>${jacoco.additional.exclude5}</exclude>
                                </excludes>
                            </configuration>
                        </execution>
                        <execution>
                            <id>merge-results</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>merge</goal>
                            </goals>
                            <configuration>
                                <fileSets>
                                    <fileSet>
                                        <directory>${project.build.directory}/coverage-reports</directory>
                                        <includes>
                                            <include>*.exec</include>
                                        </includes>
                                    </fileSet>
                                </fileSets>
                                <destFile>${project.build.directory}/coverage-reports/jacoco.exec</destFile>
                            </configuration>

                        </execution>
                        <execution>
                            <id>check</id>
                            <goals>
                                <goal>check</goal>
                            </goals>

                            <configuration>
                                <excludes>
                                    <exclude>JAVAC.SYNTHCLASS</exclude>
                                    <exclude>JAVAC.SYNTHMETH</exclude>
                                    <exclude>**/*Config*.*</exclude>
                                    <exclude>**/*Configuration.*</exclude>
                                    <exclude>**/*Application.*</exclude>
                                    <exclude>**/*Constant*.*</exclude>
                                    <exclude>**/dto/**/*</exclude>
                                    <exclude>**/model/**/*</exclude>
                                    <exclude>${jacoco.additional.exclude1}</exclude>
                                    <exclude>${jacoco.additional.exclude2}</exclude>
                                    <exclude>${jacoco.additional.exclude3}</exclude>
                                    <exclude>${jacoco.additional.exclude4}</exclude>
                                    <exclude>${jacoco.additional.exclude5}</exclude>
                                </excludes>
                                <dataFile>${project.build.directory}/coverage-reports/jacoco.exec</dataFile>
                                <rules>
                                    <rule>
                                        <element>BUNDLE</element>
                                        <limits>
                                            <limit>
                                                <counter>INSTRUCTION</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${jacoco.easyms.instr.coverage}</minimum>
                                            </limit>
                                            <limit>
                                                <counter>BRANCH</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${jacoco.easyms.branch.coverage}</minimum>
                                            </limit>
                                            <limit>
                                                <counter>CLASS</counter>
                                                <value>MISSEDCOUNT</value>
                                                <maximum>${jacoco.easyms.class.missed}</maximum>
                                            </limit>
                                        </limits>
                                    </rule>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- Enforcer plugin : dependency compatibility check-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven-enforcer-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>enforce-versions</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <fail>true</fail>
                                <failFast>true</failFast>
                                <rules>
                                    <!-- <dependencyConvergence/> -->
                                    <requireMavenVersion>
                                        <version>[${maven.version},)</version>
                                        <message>You are running an older version of Maven.
                                            requires at
                                            least Maven ${maven.version}
                                        </message>
                                    </requireMavenVersion>
                                    <requireJavaVersion>
                                        <version>[${java.version}.0,)</version>
                                        <message>You are running an older version of Java. Easyms
                                            requires at
                                            least JDK ${java.version}
                                        </message>
                                    </requireJavaVersion>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- build-helper to get current time -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                    <executions>
                        <execution>
                            <id>timestamp-property</id>
                            <goals>
                                <goal>timestamp-property</goal>
                            </goals>
                            <configuration>
                                <name>current.time</name>
                                <pattern>yyyyMMdd-HHmmss</pattern>
                                <timeZone>GMT+2</timeZone>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- Get the entrypoint.sh script -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>copy-commons</id>
                            <phase>generate-resources</phase>
                            <goals>
                                <goal>unpack</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>com.easyms</groupId>
                                        <artifactId>easyms-basic-starter</artifactId>
                                        <!-- do not put a version here so that we take the repo's one -->
                                        <type>jar</type>
                                        <overWrite>true</overWrite>
                                        <outputDirectory>${assembly.commons.dir}</outputDirectory>
                                    </artifactItem>
                                </artifactItems>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>2.6.0</version>
                    <configuration>
                        <from>
                            <image>
                                ${source.docker.registry.url}/${source.docker.openjdk.image.name}:${source.docker.openjdk.image.version}
                            </image>
                        </from>
                        <to>
                            <image>${docker.image.name}</image>
                            <tags>
                                <tag>${docker.image.version}</tag>
                            </tags>
                        </to>
                        <extraDirectories>
                            <paths>
                        <path>
                            <from>${bin.dir}</from>
                            <into>/app/bin</into>
                        </path>
                            </paths>
                            <permissions>
                            <permission>
                                <file>/app/bin/entrypoint.sh</file>
                                <mode>540</mode> <!-- Read/write/execute for owner, read/execute for group/other -->
                            </permission>
                            </permissions>
                        </extraDirectories>

                        <container>
                            <entrypoint>
                                <entry>/app/bin/entrypoint.sh</entry>
<!--                                <entry>tail</entry>-->
<!--                                <entry>-f</entry>-->
<!--                                <entry>/dev/null</entry>-->
                            </entrypoint>
                            <workingDirectory>/app/work</workingDirectory>
                        </container>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.10.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-rest-starter</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>

            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-secured-rest-starter</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>

            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-azure-ad-secured-rest-starter</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>
            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-azure-service-bus-starter</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>
            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-basic-starter</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>
            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-messaging</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>
            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-logging-starter</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>

            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-test</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>

            <dependency>
                <groupId>com.easyms</groupId>
                <artifactId>easyms-azure-test</artifactId>
                <version>1.0.26-SNAPSHOT</version>
            </dependency>

            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server</artifactId>
                <version>${spring.boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>${spring.boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-boot-starter</artifactId>
                <version>${swagger.version}</version>
            </dependency>
            <dependency>
                <groupId>net.logstash.logback</groupId>
                <artifactId>logstash-logback-encoder</artifactId>
                <version>${logstash-logback-encoder.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.inject</groupId>
                <artifactId>javax.inject</artifactId>
                <version>${javax.inject.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons-collections4.version}</version>
            </dependency>
            <dependency>
                <groupId>net.rakugakibox.spring.boot</groupId>
                <artifactId>logback-access-spring-boot-starter</artifactId>
                <version>${rakugakibox.logback.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>

        <!-- complementary dependencies for Java 11 -->
        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>1.3.2</version>
        </dependency>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.4.0-b180725.0427</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.4.0-b180725.0644</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <!-- common dependencies -->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
        </dependency>
        <!-- common dependencies -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <!-- exclude junit 4 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- junit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit-jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>microservice</id>
            <activation>
                <file>
                    <exists>src/main/resources/config/application.yml</exists>
                </file>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.easyms</groupId>
                    <artifactId>easyms-basic-starter</artifactId>
                </dependency>
            </dependencies>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>com.easyms</groupId>
                            <artifactId>main-class-extrator-plugin</artifactId>
                            <version>1.0.26-SNAPSHOT</version>
                            <executions>
                                <execution>
                                    <phase>compile</phase>
                                    <goals>
                                        <goal>sayhi</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>

                        <!-- copy common resources for filtering, must run after getting the mainClassName which run on compile phase-->
                        <plugin>
                            <artifactId>maven-resources-plugin</artifactId>
                            <version>3.2.0</version>
                            <executions>
                                <execution>
                                    <id>copy-common-resources</id>
                                    <!-- here the phase you need -->
                                    <phase>package</phase>
                                    <goals>
                                        <goal>copy-resources</goal>
                                    </goals>
                                    <configuration>
                                        <outputDirectory>${bin.dir}</outputDirectory>
                                        <resources>
                                            <resource>
                                                <directory>${assembly.commons.dir}/distrib/docker</directory>
                                                <filtering>true</filtering>
                                            </resource>
                                        </resources>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>

                        <!-- spring-boot plugin : self contained jar generation and startup using maven-->
                        <plugin>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <goals>
                                        <goal>repackage</goal>
                                        <goal>build-info</goal>
                                    </goals>
                                </execution>
                            </executions>
                            <configuration>
                                <addResources>false</addResources>
                                <jvmArguments>-Xmx256m
                                    -Dspring.config.name=${spring.config.name}
                                    -Dspring.profiles.active=${spring.profiles.active}
                                    <!--                                    -Dspring.config.location=${project.build.testOutputDirectory}/-->
                                    <!--                                    -Dlogging.config=${project.build.testOutputDirectory}/logback.xml-->
                                    -XX:+UnlockCommercialFeatures -XX:+FlightRecorder
                                    -XX:+HeapDumpOnOutOfMemoryError
                                    -XX:HeapDumpPath=${project.build.testOutputDirectory}
                                </jvmArguments>
                                <folders>
                                    <folder>${project.build.testOutputDirectory}</folder>
                                </folders>
                                <additionalProperties>
                                    <java.source>${maven.compiler.source}</java.source>
                                    <java.target>${maven.compiler.target}</java.target>
                                </additionalProperties>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>com.easyms</groupId>
                        <artifactId>main-class-extrator-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                    </plugin>
                </plugins>
                <resources>
                    <!-- copying resources that will be in jar -->
                    <resource>
                        <filtering>true</filtering>
                        <directory>src/main/resources</directory>
                        <excludes>
                            <exclude>**/*assembly.xml</exclude>
                            <exclude>**/*access.xml</exclude>
                            <exclude>**/*.zip</exclude>
                            <exclude>**/*.jks</exclude>
                            <exclude>**/*.gz</exclude>
                            <exclude>**/*.docx</exclude>
                            <exclude>**/*.cer</exclude>
                            <exclude>**/*.crt</exclude>
                            <exclude>**/*.der</exclude>
                            <exclude>**/*.pem</exclude>
                            <exclude>**/*.vm</exclude>
                        </excludes>
                    </resource>
                    <resource>
                        <filtering>false</filtering>
                        <directory>src/main/resources</directory>
                        <includes>
                            <include>**/*assembly.xml</include>
                            <include>**/*access.xml</include>
                            <include>**/*.zip</include>
                            <include>**/*.jks</include>
                            <include>**/*.gz</include>
                            <include>**/*.docx</include>
                            <include>**/*.cer</include>
                            <include>**/*.crt</include>
                            <include>**/*.der</include>
                            <include>**/*.pem</include>
                            <include>**/*.vm</include>
                        </includes>
                    </resource>
                    <resource>
                        <directory>${project.build.directory}/generated-resources</directory>
                    </resource>
                </resources>
                <testResources>
                    <testResource>
                        <directory>${project.build.directory}/generated-resources</directory>
                    </testResource>
                    <testResource>
                        <filtering>true</filtering>
                        <directory>src/test/resources</directory>
                        <excludes>
                            <exclude>**/*assembly.xml</exclude>
                            <exclude>**/*access.xml</exclude>
                            <exclude>**/*.zip</exclude>
                            <exclude>**/*.jks</exclude>
                            <exclude>**/*.gz</exclude>
                            <exclude>**/*.docx</exclude>
                            <exclude>**/*.vm</exclude>
                        </excludes>
                    </testResource>
                    <testResource>
                        <filtering>false</filtering>
                        <directory>src/test/resources</directory>
                        <includes>
                            <include>**/*assembly.xml</include>
                            <include>**/*access.xml</include>
                            <include>**/*.zip</include>
                            <include>**/*.jks</include>
                            <include>**/*.gz</include>
                            <include>**/*.docx</include>
                            <include>**/*.vm</include>
                        </includes>
                    </testResource>
                </testResources>
            </build>
        </profile>
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
